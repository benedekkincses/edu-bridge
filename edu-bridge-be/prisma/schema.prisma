generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model appointments {
  id                                  String            @id
  eventId                             String?
  schoolId                            String
  teacherId                           String
  parentId                            String
  childId                             String
  booked4usId                         String
  startTime                           DateTime
  endTime                             DateTime
  status                              AppointmentStatus @default(pending)
  createdAt                           DateTime          @default(now())
  updatedAt                           DateTime
  children                            children          @relation(fields: [childId], references: [id])
  events                              events?           @relation(fields: [eventId], references: [id])
  users_appointments_parentIdTousers  users             @relation("appointments_parentIdTousers", fields: [parentId], references: [id])
  schools                             schools           @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  users_appointments_teacherIdTousers users             @relation("appointments_teacherIdTousers", fields: [teacherId], references: [id])

  @@index([parentId, startTime])
  @@index([schoolId, startTime])
  @@index([teacherId, startTime])
}

model child_class_assignments {
  id        String   @id
  childId   String
  classId   String
  parentId  String
  createdAt DateTime @default(now())
  children  children @relation(fields: [childId], references: [id], onDelete: Cascade)
  classes   classes  @relation(fields: [classId], references: [id], onDelete: Cascade)
  users     users    @relation(fields: [parentId], references: [id], onDelete: Cascade)

  @@unique([childId, classId])
}

model children {
  id                      String                    @id
  firstName               String
  lastName                String
  dateOfBirth             DateTime?
  schoolId                String
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime
  appointments            appointments[]
  child_class_assignments child_class_assignments[]
  schools                 schools                   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
}

model class_memberships {
  id                String   @id
  classId           String
  userId            String
  role              UserRole
  canPostNews       Boolean  @default(false)
  canCreateGroups   Boolean  @default(false)
  canDeleteMessages Boolean  @default(false)
  createdAt         DateTime @default(now())
  classes           classes  @relation(fields: [classId], references: [id], onDelete: Cascade)
  users             users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([classId, userId])
}

model classes {
  id                      String                    @id
  schoolId                String
  name                    String
  type                    ClassType                 @default(Class)
  description             String?
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime
  child_class_assignments child_class_assignments[]
  class_memberships       class_memberships[]
  schools                 schools                   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  events                  events[]
  groups                  groups[]
  news_posts              news_posts[]
}

model event_rsvps {
  id        String     @id
  eventId   String
  userId    String
  status    RSVPStatus
  createdAt DateTime   @default(now())
  updatedAt DateTime
  events    events     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  users     users      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
}

model events {
  id           String         @id
  creatorId    String
  scope        EventScope
  schoolId     String?
  classId      String?
  groupId      String?
  title        String
  description  String?
  location     String?
  startTime    DateTime
  endTime      DateTime?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime
  appointments appointments[]
  event_rsvps  event_rsvps[]
  classes      classes?       @relation(fields: [classId], references: [id], onDelete: Cascade)
  users        users          @relation(fields: [creatorId], references: [id])
  groups       groups?        @relation(fields: [groupId], references: [id], onDelete: Cascade)
  schools      schools?       @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  @@index([scope, classId, startTime])
  @@index([scope, groupId, startTime])
  @@index([scope, schoolId, startTime])
}

model group_memberships {
  id       String   @id
  groupId  String
  userId   String
  joinedAt DateTime @default(now())
  groups   groups   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  users    users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([groupId, userId])
}

model groups {
  id                String              @id
  classId           String
  name              String
  description       String?
  ownerId           String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime
  events            events[]
  group_memberships group_memberships[]
  classes           classes             @relation(fields: [classId], references: [id], onDelete: Cascade)
  users             users               @relation(fields: [ownerId], references: [id])
  threads           threads?
}

model message_read_status {
  id        String   @id
  messageId String
  userId    String
  readAt    DateTime @default(now())
  messages  messages @relation(fields: [messageId], references: [id], onDelete: Cascade)
  users     users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
}

model messages {
  id                  String                @id
  threadId            String
  senderId            String
  content             String
  attachments         Json[]                @default([])
  createdAt           DateTime              @default(now())
  updatedAt           DateTime
  deletedAt           DateTime?
  message_read_status message_read_status[]
  users               users                 @relation(fields: [senderId], references: [id])
  threads             threads               @relation(fields: [threadId], references: [id], onDelete: Cascade)

  @@index([threadId, createdAt])
}

model news_post_read_status {
  id         String     @id
  newsPostId String
  userId     String
  readAt     DateTime   @default(now())
  news_posts news_posts @relation(fields: [newsPostId], references: [id], onDelete: Cascade)
  users      users      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([newsPostId, userId])
}

model news_posts {
  id                    String                  @id
  authorId              String
  scope                 NewsScope
  schoolId              String?
  classId               String?
  templateType          String
  title                 String
  content               Json
  attachments           Json[]                  @default([])
  publishedAt           DateTime                @default(now())
  createdAt             DateTime                @default(now())
  updatedAt             DateTime
  news_post_read_status news_post_read_status[]
  users                 users                   @relation(fields: [authorId], references: [id])
  classes               classes?                @relation(fields: [classId], references: [id], onDelete: Cascade)
  schools               schools?                @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  @@index([scope, classId, publishedAt])
  @@index([scope, schoolId, publishedAt])
}

model school_admins {
  id        String   @id
  userId    String
  schoolId  String
  createdAt DateTime @default(now())
  schools   schools  @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  users     users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, schoolId])
}

model schools {
  id                    String                  @id
  name                  String
  address               String?
  logo                  String?
  createdAt             DateTime                @default(now())
  updatedAt             DateTime
  appointments          appointments[]
  children              children[]
  classes               classes[]
  events                events[]
  news_posts            news_posts[]
  school_admins         school_admins[]
  user_privacy_settings user_privacy_settings[]
}

model thread_participants {
  id       String  @id
  threadId String
  userId   String
  threads  threads @relation(fields: [threadId], references: [id], onDelete: Cascade)
  users    users   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([threadId, userId])
}

model threads {
  id                  String                @id
  type                ThreadType
  groupId             String?               @unique
  createdAt           DateTime              @default(now())
  updatedAt           DateTime
  messages            messages[]
  thread_participants thread_participants[]
  groups              groups?               @relation(fields: [groupId], references: [id], onDelete: Cascade)
}

model user_privacy_settings {
  id           String  @id
  userId       String
  schoolId     String
  emailVisible Boolean @default(true)
  phoneVisible Boolean @default(true)
  schools      schools @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  users        users   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, schoolId])
}

model users {
  id                                         String                    @id
  email                                      String                    @unique
  firstName                                  String
  lastName                                   String
  phone                                      String?
  avatar                                     String?
  createdAt                                  DateTime                  @default(now())
  updatedAt                                  DateTime
  appointments_appointments_parentIdTousers  appointments[]            @relation("appointments_parentIdTousers")
  appointments_appointments_teacherIdTousers appointments[]            @relation("appointments_teacherIdTousers")
  child_class_assignments                    child_class_assignments[]
  class_memberships                          class_memberships[]
  event_rsvps                                event_rsvps[]
  events                                     events[]
  group_memberships                          group_memberships[]
  groups                                     groups[]
  message_read_status                        message_read_status[]
  messages                                   messages[]
  news_post_read_status                      news_post_read_status[]
  news_posts                                 news_posts[]
  school_admins                              school_admins[]
  thread_participants                        thread_participants[]
  user_privacy_settings                      user_privacy_settings[]
}

enum AppointmentStatus {
  pending
  confirmed
  cancelled
}

enum ClassType {
  Class
  TeacherRoom
}

enum EventScope {
  school
  class
  group
}

enum NewsScope {
  school
  class
}

enum RSVPStatus {
  yes
  no
  maybe
}

enum ThreadType {
  direct
  group
}

enum UserRole {
  teacher
  parent
}
